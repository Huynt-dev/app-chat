[{"/home/huynt/project-app-chat/app-chat/src/App.js":"1","/home/huynt/project-app-chat/app-chat/src/containers/index.js":"2","/home/huynt/project-app-chat/app-chat/src/containers/Register/index.js":"3","/home/huynt/project-app-chat/app-chat/src/containers/Register/style.js":"4","/home/huynt/project-app-chat/app-chat/src/components/Menu/style.js":"5","/home/huynt/project-app-chat/app-chat/src/routes/PublicRoute.js":"6","/home/huynt/project-app-chat/app-chat/src/containers/Login/style.js":"7","/home/huynt/project-app-chat/app-chat/src/containers/Home/index.js":"8","/home/huynt/project-app-chat/app-chat/src/layouts/style.js":"9","/home/huynt/project-app-chat/app-chat/src/containers/Home/style.js":"10","/home/huynt/project-app-chat/app-chat/src/layouts/index.js":"11"},{"size":267,"mtime":1608124752963,"results":"12","hashOfConfig":"13"},{"size":144,"mtime":1608041862530,"results":"14","hashOfConfig":"13"},{"size":5182,"mtime":1608119904790,"results":"15","hashOfConfig":"13"},{"size":250,"mtime":1608041862530,"results":"16","hashOfConfig":"13"},{"size":251,"mtime":1608041862530,"results":"17","hashOfConfig":"13"},{"size":388,"mtime":1608041862530,"results":"18","hashOfConfig":"13"},{"size":451,"mtime":1608041862530,"results":"19","hashOfConfig":"13"},{"size":1547,"mtime":1608136220939,"results":"20","hashOfConfig":"13"},{"size":480,"mtime":1608130806315,"results":"21","hashOfConfig":"13"},{"size":1373,"mtime":1608133517150,"results":"22","hashOfConfig":"13"},{"size":106,"mtime":1608041862530,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1z0zpma",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/huynt/project-app-chat/app-chat/src/App.js",[],["48","49"],"/home/huynt/project-app-chat/app-chat/src/containers/index.js",[],"/home/huynt/project-app-chat/app-chat/src/containers/Register/index.js",["50"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport callApi from \"../../helpers/axios\";\nimport { Form, Input, Tooltip, Select, Checkbox, Button } from \"antd\";\nimport { FromA } from \"./style\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nconst { Option } = Select;\n\nconst Register = () => {\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [nickName, setNickName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n\n  const onFinish = async (values) => {\n    try {\n      await callApi.post(\"/auth/register\", {\n        firstName,\n        lastName,\n        email,\n        nickName,\n        password,\n        gender,\n      });\n\n      history.push(\"/login\");\n    } catch (error) {}\n  };\n\n  const prefixSelector = (\n    <Form.Item name=\"prefix\" noStyle>\n      <Select\n        style={{\n          width: 70,\n        }}\n      >\n        <Option value=\"84\">+84</Option>\n      </Select>\n    </Form.Item>\n  );\n\n  return (\n    <FromA\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      initialValues={{\n        prefix: \"84\",\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        label=\"First Name\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your nickname!\",\n            whitespace: true,\n          },\n        ]}\n        onChange={(e) => setFirstName(e.target.value)}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Last Name\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your nickname!\",\n            whitespace: true,\n          },\n        ]}\n        onChange={(e) => setLastName(e.target.value)}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"nickname\"\n        label={\n          <span>\n            Nickname&nbsp;\n            <Tooltip title=\"What do you want others to call you?\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[\n          {\n            required: true,\n            message: \"Please input your nickname!\",\n            whitespace: true,\n          },\n        ]}\n        onChange={(e) => setNickName(e.target.value)}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: \"email\",\n            message: \"The input is not valid E-mail!\",\n          },\n          {\n            required: true,\n            message: \"Please input your E-mail!\",\n          },\n        ]}\n        onChange={(e) => setEmail(e.target.value)}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your password!\",\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={[\"password\"]}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: \"Please confirm your password!\",\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\n                \"The two passwords that you entered do not match!\"\n              );\n            },\n          }),\n        ]}\n        onChange={(e) => setPassword(e.target.value)}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"phone\"\n        label=\"Phone Number\"\n        rules={[\n          {\n            message: \"Please input your phone number!\",\n          },\n        ]}\n      >\n        <Input\n          addonBefore={prefixSelector}\n          style={{\n            width: \"100%\",\n          }}\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"gender\"\n        label=\"Gender\"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select placeholder=\"....\" allowClear onSelect={(e) => setGender(e)}>\n          <Option value=\"male\">male</Option>\n          <Option value=\"female\">female</Option>\n          <Option value=\"other\">other</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item\n        name=\"agreement\"\n        valuePropName=\"checked\"\n        rules={[\n          {\n            validator: (_, value) =>\n              value\n                ? Promise.resolve()\n                : Promise.reject(\"Should accept agreement\"),\n          },\n        ]}\n      >\n        <Checkbox>\n          I have read the <a href=\"\">agreement</a>\n        </Checkbox>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </FromA>\n  );\n};\n\nexport default Register;\n","/home/huynt/project-app-chat/app-chat/src/containers/Register/style.js",[],"/home/huynt/project-app-chat/app-chat/src/components/Menu/style.js",[],"/home/huynt/project-app-chat/app-chat/src/routes/PublicRoute.js",[],"/home/huynt/project-app-chat/app-chat/src/containers/Login/style.js",[],"/home/huynt/project-app-chat/app-chat/src/containers/Home/index.js",[],"/home/huynt/project-app-chat/app-chat/src/layouts/style.js",[],"/home/huynt/project-app-chat/app-chat/src/containers/Home/style.js",[],"/home/huynt/project-app-chat/app-chat/src/layouts/index.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":211,"column":27,"nodeType":"57","endLine":211,"endColumn":38},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]